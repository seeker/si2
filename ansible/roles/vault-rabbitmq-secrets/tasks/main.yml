---
- name: Check if RabbitMQ secrets engine is enabled
  uri:
    url: "{{ vault_api_url }}/sys/mounts"
    headers:
      X-Vault-Token: "{{ vault_token }}"
  register: mounts_response

- name: Enable RabbitMQ secrets engine
  block:
    - name: Enable RabbitMQ secrets engine via API call
      uri:
        url: "{{ vault_api_url }}/sys/mounts/rabbitmq"
        method: POST
        body_format: json
        status_code: 204
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body:
          type: rabbitmq
          config:
            max_lease_ttl: 1h

  when: mounts_response['json']['data']['rabbitmq/'] is not defined 

- name: RabbitMQ credentials
  block:
  - name: Get RabbitMQ admin credentails from Vault
    uri:
      url: "{{ vault_api_url }}/kv/rabbitmq/admin"
      method: GET
      body_format: json
      headers:
        X-Vault-Token: "{{ vault_token }}"

    register: password_response
    check_mode: no
    diff: no

  - set_fact:
      rabbitmq_user: "{{ password_response.json.data.username }}"
      rabbitmq_password: "{{ password_response.json.data.password }}"

  rescue:
    - debug:
        msg: "Generating new RabbitMQ admin credentials"
      changed_when: true

    - set_fact:
        rabbitmq_user: admin
        rabbitmq_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters,digits') }}"
    
    - name: Store RanbbitMQ credentials in Vault
      uri:
        url: "{{ vault_api_url }}/kv/rabbitmq/admin"
        method: POST
        status_code:
          - 200
          - 204
        body_format: json
        body:
          username: "{{ rabbitmq_user }}"
          password: "{{ rabbitmq_password }}"
        headers:
          X-Vault-Token: "{{ vault_token }}"

- name: Configure RabbitMQ connection details for Vault
  uri:
    url: "{{ vault_api_url }}/rabbitmq/config/connection"
    method: POST
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body:
      connection_uri: "http://rabbitmq.service.consul:15672"
      username: "{{ rabbitmq_user }}"
      password: "{{ rabbitmq_password }}"
      # Since the job will not be running yet, this task would fail
      verify_connection: false
# RabbitMQ role for integration can be found in dev-vault-credentails

- name: Configure RabbitMQ role for database node
  uri:
    url: "{{ vault_api_url }}/rabbitmq/roles/dbnode"
    method: POST
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body: 
      # The space before the first { is needed to trick ansible into thinking it's a string
      vhosts: ' {"{{ rabbitmq_vhost }}": {"configure":".*", "write":".*", "read": ".*"}}'

# FIXME restrict node permissions
- name: Configure RabbitMQ role for hash processor node
  uri:
    url: "{{ vault_api_url }}/rabbitmq/roles/hash_processor"
    method: POST
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body: 
      # The space before the first { is needed to trick ansible into thinking it's a string
      vhosts: ' {"{{ rabbitmq_vhost }}": {"configure":".*", "write":".*", "read": ".*"}}'

- name: Configure RabbitMQ role for file loader node
  uri:
    url: "{{ vault_api_url }}/rabbitmq/roles/file_loader"
    method: POST
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body: 
      # The space before the first { is needed to trick ansible into thinking it's a string
      vhosts: ' {"{{ rabbitmq_vhost }}": {"configure":".*", "write":".*", "read": ".*"}}'

- name: Configure RabbitMQ role for image resizer node
  uri:
    url: "{{ vault_api_url }}/rabbitmq/roles/image_resizer"
    method: POST
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body: 
      # The space before the first { is needed to trick ansible into thinking it's a string
      vhosts: ' {"{{ rabbitmq_vhost }}": {"configure":".*", "write":".*", "read": ".*"}}'
  
- name: Configure RabbitMQ role for digest hasher node
  uri:
    url: "{{ vault_api_url }}/rabbitmq/roles/digest_hasher"
    method: POST
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body: 
      # The space before the first { is needed to trick ansible into thinking it's a string
      vhosts: ' {"{{ rabbitmq_vhost }}": {"configure":".*", "write":".*", "read": ".*"}}'

- name: Configure RabbitMQ role for thumbnail node
  uri:
    url: "{{ vault_api_url }}/rabbitmq/roles/thumbnail"
    method: POST
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body: 
      # The space before the first { is needed to trick ansible into thinking it's a string
      vhosts: ' {"{{ rabbitmq_vhost }}": {"configure":".*", "write":".*", "read": ".*"}}'

- name: Configure RabbitMQ role for client application
  uri:
    url: "{{ vault_api_url }}/rabbitmq/roles/client"
    method: POST
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body: 
      # The space before the first { is needed to trick ansible into thinking it's a string
      vhosts: ' {"{{ rabbitmq_vhost }}": {"configure":".*", "write":".*", "read": ".*"}}'
