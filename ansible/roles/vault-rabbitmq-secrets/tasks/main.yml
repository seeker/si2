---
- name: Check if RabbitMQ secrets engine is enabled
  uri:
    url: "{{ vault_api_url }}/sys/mounts"
    headers:
      X-Vault-Token: "{{ vault_token }}"
  register: mounts_response

- name: Enable RabbitMQ secrets engine
  block:
    - name: Enable RabbitMQ secrets engine via API call
      uri:
        url: "{{ vault_api_url }}/sys/mounts/rabbitmq"
        method: POST
        body_format: json
        status_code: 204
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body:
          type: rabbitmq
          config:
            max_lease_ttl: 1h

  when: mounts_response['json']['data']['rabbitmq/'] is not defined

- name: Check if RabbitMQ admin credentails exist in Vault
  uri:
    url: "{{ vault_api_url }}/kv/rabbitmq/admin"
    method: GET
    body_format: json
    status_code:
    - 200
    - 404
    headers:
      X-Vault-Token: "{{ vault_token }}"

  register: password_response
  check_mode: no

- name: Generate RabbitMQ admin credentials
  block:
  - set_fact:
      rabbitmq_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters,digits') }}"

  - name: Store RabbitMQ admin credentials
    uri:
      url: "{{ vault_api_url }}/kv/rabbitmq/admin"
      method: POST
      body_format: json
      status_code: 204
      headers:
        X-Vault-Token: "{{ vault_token }}"
      body:
        username: admin
        password: "{{ rabbitmq_password }}"
    register: create_rabbitmq_creds

  when: password_response.status == 404  

- name: Get RabbitMQ admin credentails from Vault
  uri:
    url: "{{ vault_api_url }}/kv/rabbitmq/admin"
    method: GET
    body_format: json
    status_code:
    - 200
    - 404
    headers:
      X-Vault-Token: "{{ vault_token }}"

  register: password_response
  check_mode: no

- name: Configure RabbitMQ connection details for Vault
  uri:
    url: "{{ vault_api_url }}/rabbitmq/config/connection"
    method: POST
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body:
      connection_uri: "http://192.168.42.12:15672"
      username: "{{ password_response.json.data.username }}"
      password: "{{ password_response.json.data.password }}"

- name: Configure RabbitMQ role for database node
  uri:
    url: "{{ vault_api_url }}/rabbitmq/roles/dbnode"
    method: POST
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body: 
      # The space before the first { is needed to trick ansible into thinking it's a string
      vhosts: ' {"{{ rabbitmq_vhost }}": {"configure":".*", "write":".*", "read": ".*"}}'

# RabbitMQ role for integration can be found in dev-vault-credentails
