---
- name: Check if Vault has been initialized
  uri:
    url: "{{ vault_api_url }}/sys/init"
    validate_certs: no
    body_format: json
    return_content: yes
  register: vault_init_response
  check_mode: no

- name: Vault is initialized
  assert:
    that:
      - vault_init_response.json.initialized

- name: Create SI2 rabbitmq user policy
  uri:
    url: "{{ vault_api_url }}/sys/policy/si2-rabbitmq"
    method: PUT
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body: 
      policy: >-
          path "rabbitmq/creds/si2" {
            capabilities = ["read"]
          }

- name: Create SI2 rabbitmq Nomad policy
# So Nomad can setup a RabbitMQ image
  uri:
    url: "{{ vault_api_url }}/sys/policy/si2-rabbitmq-nomad"
    method: PUT
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body:
      policy: >-
          path "kv/rabbitmq/admin" {
            capabilities = ["read"]
          }

- name: Create SI2 Docker registry policy
# TLS required for external registry access?
  uri:
    url: "{{ vault_api_url }}/sys/policy/si2-registry-nomad"
    method: PUT
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body:
      policy: >-
          path "pki/issue/registry" {
            capabilities = ["read","create","update"]
          }

- name: Read auth methods
  uri:
    url: "{{ vault_api_url }}/sys/auth"
    method: GET
    body_format: json
    status_code: 200
    headers:
      X-Vault-Token: "{{ vault_token }}"
  register: auth_methods
  check_mode: no

- name: Create SI2 dynamic node policy
  uri:
    url: "{{ vault_api_url }}/sys/policy/node"
    method: PUT
    body_format: json
    status_code: 204
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body:
      policy: |-
          path "rabbitmq/creds/{{ '{{' }}identity.entity.aliases.{{auth_methods["json"]["approle/"]["accessor"]}}.name{{ '}}' }}" {
            capabilities = ["read"]
          }
          
          #FIXME use metadata from approle to limit access
          path "rabbitmq/creds/*" {
            capabilities = ["read"]
          }
